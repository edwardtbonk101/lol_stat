<h2><%= @t_name %></h2>
<section class="stats-column column-2 box-shadow">
  <h3>Roster</h3>
  <table class="table-content">
    <tbody>
      <tr class="table-headings">
        <th>Player Name</th>
        <th>Player Role</th>
      </tr>
    <% @roster.each do |player| %>
      <tr>
        <td><p><%= link_to player.p_name, "#{params[:team]}/#{player.p_name}" %></p></td>
        <td><p><%= player.role %></p></td>
      </tr>
    <% end %>
    </tbody>
  </table>
</section>
<section class="stats-column column-2 box-shadow" id="pie">
  <h3>Stats</h3>
   <script type="text/javascript">
 
    var w = 300,                        //width
    h = 300,                            //height
    r = 150,                            //radius
    z = d3.scale.ordinal()
      .domain(['a', 'b'])
      .range(["#6E6E6E", "#EE4618"])
    data = [{"label":"wins", "value":21}, 
            {"label":"losses", "value":7}];
    
    var vis = d3.select("#pie")
        .append("svg:svg")              //create the SVG element inside the <body>
        .data([data])                   //associate our data with the document
            .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
            .attr("height", h)
        .append("svg:g")                //make a group to hold our pie chart
            .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius
 
    var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
        .outerRadius(r);
 
    var pie = d3.layout.pie()           //this will create arc data for us given a list of values
        .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array
 
    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                .attr("class", "slice");    //allow us to style things in the slices (like text)
 
        arcs.append("svg:path")
                .attr("fill", function(d, i) { return z(i); } ) //set the color for each slice to be chosen from the color function defined above
                .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function
 
        arcs.append("svg:text")                                     //add a label to each slice
                .attr("transform", function(d) {                    //set the label's origin to the center of the arc
                //we have to make sure to set these before calling arc.centroid
                d.innerRadius = 0;
                d.outerRadius = r;
                return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
            })
            .attr("text-anchor", "middle")                          //center the text on it's origin
            .text(function(d, i) { return data[i].label; });        //get the label from our original data array
        arcs.append("svg:text")
          .attr("transform", function(d) {
            d.innerRadius = 75;
            d.outerRadius = r;
            return "translate(" + arc.centroid(d) + ")"; 
          })
          .attr("text-anchor", "middle")
          .text(function(d, i) { return data[i].value; });
    </script>
  </section>
  <section class="column-1 box-shadow">
    <h3>Schedule</h3>
  </section>